data sources:
----------
www.nwac.us
www.avalanche.org
www.avalanche.ca ; http://www.avalanche.ca/cac/bulletins/latest

http://www.nwac.us/forecast/avalanche/current/zone/1/
    an example of a stable forecast link by region. 

http://www.nwac.us/dangerrose/preview/2227/
    an example of a generated danger rose. generated for a specific date, region, etc., with a generated URL. 400x400, on a transparent background.

avalanche levels definitions
    single image: http://www.nwac.us/media/uploads/NA_danger_scale_2010.jpg (image is 480x266)
    as text and icons: http://www.avalanche.ca/cac/bulletins/danger-scale

i've downloaded the danger scale icons. they are PDFs. source is: http://www.avalanche.org/zip/Danger_Scale_Icons.zip

KMZ/KML files for regions:
    all of Canada: http://avalanche.ca/kmz/bulletinregions.kmz
    NW: would need to define. could base on NW region map: http://www.nwac.us/media/images/avalanche-map-small.jpg but would be manual work.


basic app design concept:
----------
* overview map
    * uses the map view, zoomed out a ways, hybrid view mode; center on user's current location
    * overlay regions based on current "bottom line" avalanche forecast color (and/or icon)
    * click a region to drill to details
* details pages
    * shows the detailed forecast information for that region (including forecast timestamp, avalanche roses if available, etc.)
    * exact details will depend on the forecasting region
* information page
    * shows the level definitions, etc.


things to do:
----------
WS
    serve regions.json
    parse other data fields
    return other data fields in data message (and switch to real JSON generation)
    support other avi centers beyond nwac
    set up unit tests for the web scraping piece, with examples of real pages from the sites as well as other corner cases
iOS
    fetch regions.json
    create data model (NSMutableDictionary, key is region id; value is object with the aviLevel, full forecast, map region, region name, etc.), including caching
    draw actual overlays based on data, and color appropriately based on conditions
    bug: once app is running, and aviLevel color set, color does not update (need to refresh when app regains focus)
    create real UI layout
    info page
    parsing of fuller WS response format, once that is added
    drill down to details page
 other
    off-machine source control
    iOS4 support?
    liability warning?
    ask for ratings?
    icons, startup screens
    check orientation settings
    check unloading behavior (viewdidunload, etc.) -- what should be view level vs. app level? what should get unloaded?
    check low memory behavior
    check no network behavior
    check no GPS behavior
    attributions?
    LLC?
    pricing?
    submit app to Apple
