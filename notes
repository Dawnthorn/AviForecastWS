data sources:
----------
www.nwac.us
www.avalanche.org
www.avalanche.ca ; http://www.avalanche.ca/cac/bulletins/latest

http://www.nwac.us/forecast/avalanche/current/zone/1/
    an example of a stable forecast link by region. 

http://www.nwac.us/dangerrose/preview/2227/
    an example of a generated danger rose. generated for a specific date, region, etc., with a generated URL. 400x400, on a transparent background.

avalanche levels definitions
    single image: http://www.nwac.us/media/uploads/NA_danger_scale_2010.jpg (image is 480x266)
    as text and icons: http://www.avalanche.ca/cac/bulletins/danger-scale

i've downloaded the danger scale icons. they are PDFs. source is: http://www.avalanche.org/zip/Danger_Scale_Icons.zip

KMZ/KML files for regions:
    all of Canada: http://avalanche.ca/kmz/bulletinregions.kmz
    NW: would need to define. could base on NW region map: http://www.nwac.us/media/images/avalanche-map-small.jpg but would be manual work.


basic app design concept:
----------
* overview map
    * uses the map view, zoomed out a ways, hybrid view mode; center on user's current location
    * overlay regions based on current "bottom line" avalanche forecast color (and/or icon)
    * click a region to drill to details
* details pages
    * shows the detailed forecast information for that region (including forecast timestamp, avalanche roses if available, etc.)
    * exact details will depend on the forecasting region
* information page
    * shows the level definitions, etc.


things to do:
----------
WS
    set up unit tests (via Mocha) for the web scraping piece, with examples of real pages from the sites as well as other corner cases
    serve regions.json
    support other avi centers beyond nwac
    remove console messages for happy path (or turn down, via a real logger like Winston)
    scale testing
iOS
    parsing of fuller WS response format, once that is added (including empty response; date not matching; matching date but aviLevel == 0)
    create data model (NSMutableDictionary, key is region id; value is object with the details); including caching of data within a session
    draw actual overlays based on data, and color appropriately based on conditions
    refresh forecast data and redraw when app regains focus (app lifecycle events, chapter 11 in book)
    fetch regions.json
    design and implement real UI layout
    readable layout on non-retina displays
    bug: map didn't center to user location on JohnC's iPad
    info page(s)?
    drill down to details page?
    offline caching?
    iOS4 support?
    liability warning?
    ask for ratings?
    push notifications?
    user performance acceptable?
    startup screens
    check orientation settings
    check task switching behavior (viewDidUnload, etc.) -- what should be view level vs. app level? what should get unloaded?
    check low memory behavior
    check no network behavior
    check no GPS behavior
    attributions?
 other
    beta testing (TestFlight)
    ensure accuracy!
    work with NWAC
    contact other avalanche centers?
    LLC? or just add "Sebnarware" or similar to my existing biz license?
    paid or free? thinking free
    submit app to Apple
    marketing
future possibilities
    weather links
    info links
    field tools (inclinometer, etc.)
